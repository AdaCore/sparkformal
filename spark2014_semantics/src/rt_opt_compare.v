(** 
_AUTHOR_

<<
Zhi Zhang
Department of Computer and Information Sciences
Kansas State University
zhangzhi@ksu.edu
>>
*)

Require Export rt_gen.

(** * Check Flags Optimization Comparison For Program *) 
(**
   Compare the Run-Time Check Optimization between GNAT and Our Tool
*)

Section Check_Optimization_Comparison.
  
  (** To verify run-time check flags generated by the GNAT front end against
      the expected run-time check flags as required by the semantics of SPARK 
      language, any mismatched run-time check flags will be recorded in a message
      of type diff_message identified by a unique ast number ast_number;

      - gnatpro_check_flags: run-time checks of GNAT compiler

      - expected_complete_checks: run-time checks generated by our checks_generator

      - expected_optimized_checks: run-time checks optimized by our checks_optimization

      it should hold that: 
         expected_optimized_checks <= gnatpro_checks <= expected_complete_checks
  *)

  Inductive diff_annotation : Set :=
    not_superset_of_opt_cks :   diff_annotation |
    not_subset_of_cmp_cks :     diff_annotation |
    not_inbetween_opt_cmp_cks : diff_annotation |
    optimization_diff         : diff_annotation.
  
  Record diff_message: Type := diff {
    ast_number: astnum;
    expected_optimized_checks: check_flags;
    gnatpro_checks: check_flags;
    expected_complete_checks: check_flags;
    anno: diff_annotation
  }.

  (** the return information by the run-time checks verification procedure:
      - OK: run-time check flags generated by GNAT front end match the expected 
            ones as required by the semantics of SPARK language;
      - Mismatch: lists all ast nodes where the run-time check flags are not matching;
      - Error: means two ast trees are not matching, in this case, it is meaningless 
               to compare their check flags;
  *)
  Inductive return_message: Type := 
    | OK: return_message
    | Mismatch: list diff_message -> return_message
    | Error.

  (** compare run-time check flags 'cks2' generated by GNAT front end against the
      expected run-time check flags 'cks1' as required by semantics of SPARK language; 
  *)

  Function check_optimization_compare (ast_num: astnum) (opt_cks gnat_cks cmp_cks: check_flags): return_message :=
    if (subset_of opt_cks gnat_cks) then
      if (beq_nat (length gnat_cks) (length opt_cks)) then
        OK
      else
        Mismatch ((diff ast_num opt_cks gnat_cks nil optimization_diff) :: nil)
    else
      Mismatch ((diff ast_num opt_cks gnat_cks nil not_superset_of_opt_cks) :: nil).

  (** merge two return message *)
  Function conj_message (m1 m2: return_message): return_message :=
    match m1 with
    | OK => m2
    | Mismatch diff1 =>
        match m2 with
        | OK => m1
        | Mismatch diff2 => Mismatch (diff1 ++ diff2)
        | Error => Error
        end
     | Error => Error
    end.


  (** ** Check Flags Validator For Expression *)

  Function exp_check_optimization_compare (e_opt e_gnat e_cmp: expRT): return_message :=
    match e_opt, e_gnat, e_cmp with
    | LiteralRT ast_num l in_cks ex_cks, LiteralRT ast_num' l' in_cks' ex_cks', LiteralRT ast_num'' l'' in_cks'' ex_cks'' =>
        check_optimization_compare ast_num (in_cks ++ ex_cks) (in_cks' ++ ex_cks') (in_cks'' ++ ex_cks'')
    | NameRT ast_num n, NameRT ast_num' n', NameRT ast_num'' n'' =>
        name_check_optimization_compare n n' n''
    | BinOpRT ast_num op e1 e2 in_cks ex_cks, BinOpRT ast_num' op' e1' e2' in_cks' ex_cks', 
                                                           BinOpRT ast_num'' op'' e1'' e2'' in_cks'' ex_cks'' =>
        conj_message (check_optimization_compare ast_num (in_cks ++ ex_cks) (in_cks' ++ ex_cks') (in_cks'' ++ ex_cks''))
                     (conj_message (exp_check_optimization_compare e1 e1' e1'')
                                   (exp_check_optimization_compare e2 e2' e2''))
     | UnOpRT ast_num op e in_cks ex_cks, UnOpRT ast_num' op' e' in_cks' ex_cks',
                                                       UnOpRT ast_num'' op'' e'' in_cks'' ex_cks'' =>
        conj_message (check_optimization_compare ast_num (in_cks ++ ex_cks) (in_cks' ++ ex_cks') (in_cks'' ++ ex_cks''))
                     (exp_check_optimization_compare e e' e'')
     | _, _, _ => Error
     end

  (** ** Check Flags Validator For Name *)

  with name_check_optimization_compare (n_opt n_gnat n_cmp: nameRT): return_message :=
    match n_opt, n_gnat, n_cmp with
    | IdentifierRT ast_num x ex_cks, IdentifierRT ast_num' x' ex_cks', IdentifierRT ast_num'' x'' ex_cks'' =>
        check_optimization_compare ast_num ex_cks ex_cks' ex_cks''
    | IndexedComponentRT ast_num x e ex_cks, IndexedComponentRT ast_num' x' e' ex_cks', 
                                                IndexedComponentRT ast_num'' x'' e'' ex_cks'' =>
        conj_message (check_optimization_compare ast_num ex_cks ex_cks' ex_cks'')
                     (conj_message (name_check_optimization_compare x x' x'')
                                   (exp_check_optimization_compare e e' e'')
                     )
    | SelectedComponentRT ast_num x f ex_cks, SelectedComponentRT ast_num' x' f' ex_cks',
                                                 SelectedComponentRT ast_num'' x'' f'' ex_cks'' =>
        conj_message (check_optimization_compare ast_num ex_cks ex_cks' ex_cks'')
                     (name_check_optimization_compare x x' x'')
    | _, _, _ => Error
    end.

  Function args_check_optimization_compare (es_opt es_gnat es_cmp: list expRT): return_message :=
    match es_opt, es_gnat, es_cmp with
    | nil, nil, nil => OK
    | (e1 :: es_opt'), (e2 :: es_gnat'), (e3 :: es_cmp') =>
        conj_message (exp_check_optimization_compare e1 e2 e3)
                     (args_check_optimization_compare es_opt' es_gnat' es_cmp')
    | _, _, _ => Error
    end.


  (** ** Check Flags Validator For Statement *)

  Function stmt_check_optimization_compare (c_opt c_gnat c_cmp: stmtRT): return_message :=
    match c_opt, c_gnat, c_cmp with
    | NullRT, NullRT, NullRT => OK
    | AssignRT ast_num x e, AssignRT ast_num' x' e', AssignRT ast_num'' x'' e'' =>
        conj_message (name_check_optimization_compare x x' x'')
                     (exp_check_optimization_compare e e' e'')
    | IfRT ast_num e c1 c2, IfRT ast_num' e' c1' c2', IfRT ast_num'' e'' c1'' c2'' =>
        conj_message (exp_check_optimization_compare e e' e'')
                     (conj_message (stmt_check_optimization_compare c1 c1' c1'')
                                   (stmt_check_optimization_compare c2 c2' c2''))
    | WhileRT ast_num e c, WhileRT ast_num' e' c', WhileRT ast_num'' e'' c'' =>
        conj_message (exp_check_optimization_compare e e' e'')
                     (stmt_check_optimization_compare c c' c'')
    | CallRT ast_num p_ast_num p args, CallRT ast_num' p_ast_num' p' args', 
                                                   CallRT ast_num'' p_ast_num'' p'' args'' =>
        (args_check_optimization_compare args args' args'')
    | SeqRT ast_num c1 c2, SeqRT ast_num' c1' c2', SeqRT ast_num'' c1'' c2'' =>
        conj_message (stmt_check_optimization_compare c1 c1' c1'')
                     (stmt_check_optimization_compare c2 c2' c2'')
    | _, _, _ => Error
    end.

  Function type_decl_check_optimization_compare (t_opt t_gnat t_cmp: typeDeclRT): return_message :=
    match t_opt, t_gnat, t_cmp with
    | SubtypeDeclRT ast_num tn t (RangeRT l u), SubtypeDeclRT ast_num' tn' t' (RangeRT l' u'),
      SubtypeDeclRT ast_num'' tn'' t'' (RangeRT l'' u'') =>
        OK
    | DerivedTypeDeclRT ast_num tn t (RangeRT l u), DerivedTypeDeclRT ast_num' tn' t' (RangeRT l' u'),
      DerivedTypeDeclRT ast_num'' tn'' t'' (RangeRT l'' u'') =>
        OK
    | IntegerTypeDeclRT ast_num tn (RangeRT l u), IntegerTypeDeclRT ast_num' tn' (RangeRT l' u'),
      IntegerTypeDeclRT ast_num'' tn'' (RangeRT l'' u'') =>  
        OK
    | ArrayTypeDeclRT ast_num tn tm t, ArrayTypeDeclRT ast_num' tn' tm' t',
      ArrayTypeDeclRT ast_num'' tn'' tm'' t'' =>
        OK
    | RecordTypeDeclRT ast_num tn fs, RecordTypeDeclRT ast_num' tn' fs',
      RecordTypeDeclRT ast_num'' tn'' fs'' =>
        OK
    | _, _, _ => 
        Error
    end.

  Function object_decl_check_optimization_compare (o_opt o_gnat o_cmp: objDeclRT): return_message :=
    match o_opt, o_gnat, o_cmp with
    | mkobjDeclRT ast_num x t None, mkobjDeclRT ast_num' x' t' None, 
      mkobjDeclRT ast_num'' x'' t'' None =>
        OK
    | mkobjDeclRT ast_num x t (Some e), mkobjDeclRT ast_num' x' t' (Some e'),
      mkobjDeclRT ast_num'' x'' t'' (Some e'') =>
        exp_check_optimization_compare e e' e''
    | _, _, _ => 
        Error
    end.

  Function object_decls_check_optimization_compare (os_opt os_gnat os_cmp: list objDeclRT): return_message :=
    match os_opt, os_gnat, os_cmp with
    | nil, nil, nil => OK
    | o1 :: os_opt', o2 :: os_gnat', o3 :: os_cmp' => 
        conj_message (object_decl_check_optimization_compare o1 o2 o3)
                     (object_decls_check_optimization_compare os_opt' os_gnat' os_cmp')
    | _, _, _ => Error
    end.

  Function param_spec_check_optimization_compare (param_opt param_gnat param_cmp: paramSpecRT): return_message :=
    match param_opt, param_gnat, param_cmp with
    | mkparamSpecRT ast_num x m t, mkparamSpecRT ast_num' x' m' t',
      mkparamSpecRT ast_num'' x'' m'' t'' =>
        OK
    end.

  Function param_specs_check_optimization_compare (params_opt params_gnat params_cmp: list paramSpecRT): return_message :=
    match params_opt, params_gnat, params_cmp with
    | nil, nil, nil => OK
    | param1 :: params_opt', param2 :: params_gnat', param3 :: params_cmp' => 
        conj_message (param_spec_check_optimization_compare param1 param2 param3)
                     (param_specs_check_optimization_compare params_opt' params_gnat' params_cmp')
    | _, _, _ => Error
    end.

  (** ** Check Flags Validator For Declaration *)

  Function declaration_check_optimization_compare (d_opt d_gnat d_cmp: declRT): return_message :=
    match d_opt, d_gnat, d_cmp with
    | NullDeclRT, NullDeclRT, NullDeclRT => OK
    | TypeDeclRT ast_num t, TypeDeclRT ast_num' t', TypeDeclRT ast_num'' t'' => 
        type_decl_check_optimization_compare t t' t''
    | ObjDeclRT ast_num o, ObjDeclRT ast_num' o', ObjDeclRT ast_num'' o'' =>
        object_decl_check_optimization_compare o o' o''
    | ProcBodyDeclRT ast_num p, ProcBodyDeclRT ast_num' p', ProcBodyDeclRT ast_num'' p'' =>
        procedure_body_check_optimization_compare p p' p''
    | SeqDeclRT ast_num d1 d2, SeqDeclRT ast_num' d1' d2', SeqDeclRT ast_num'' d1'' d2'' =>
        conj_message (declaration_check_optimization_compare d1 d1' d1'')
                     (declaration_check_optimization_compare d2 d2' d2'')
    | _, _, _ => Error
    end

  with procedure_body_check_optimization_compare (p_opt p_gnat p_cmp: procBodyDeclRT): return_message :=
    match p_opt, p_gnat, p_cmp with
    | mkprocBodyDeclRT ast_num p params decls stmt, mkprocBodyDeclRT ast_num' p' params' decls' stmt',
      mkprocBodyDeclRT ast_num'' p'' params'' decls'' stmt'' =>
        conj_message (param_specs_check_optimization_compare params params' params'')
                     (conj_message (declaration_check_optimization_compare decls decls' decls'')
                                   (stmt_check_optimization_compare stmt stmt' stmt''))
    end.

  (** compile2_flagged_declaration_f (st: symboltable) (d: declaration): option declarationRT, 
      compile2_flagged_declaration_f function computes the expected ast with desired checks, which
      is used to compare with the ast with checks generated by gnatpro frontend;
      x: is the expected ast tree, y: is gnatpro generated ast tree;
      this function is used for test demo;
  *)
  Definition checks_optimization_compare (opt_ast_option: option declRT) (gnat_ast: declRT) 
                              (cmp_ast_option: option declRT): return_message :=
    match opt_ast_option, cmp_ast_option with
    | Some opt_ast, Some cmp_ast => declaration_check_optimization_compare opt_ast gnat_ast cmp_ast
    | _, _ => Error
    end.

End Check_Optimization_Comparison.


(** * Map Back to SPARK Source Code *) 

Section Map_To_Source_Location.

  Record diff_message': Type := diff' {
    astNumber: astnum;
    sourceLoc: source_location;
    expectedOptimizedChecks: check_flags;
    gnatproChecks : check_flags;
    expectedCompleteChecks: check_flags;
    annotation: diff_annotation
  }.

  Inductive return_message': Type := 
    | OK'    : return_message'
    | Error' : return_message'
    | Mismatch': list diff_message' -> return_message'.

  Function wrap_messages_with_source_location (st: Symbol_Table_Module.symboltable) (msgs: list diff_message): option (list diff_message') :=
    match msgs with
    | nil => Some nil
    | (diff ast_num opt_cks gnat_cks cmp_cks a) :: msgs' =>
        match fetch_sloc ast_num st with
        | Some srcLocation =>
            match (wrap_messages_with_source_location st msgs') with
            | Some msgs'' => Some ((diff' ast_num srcLocation opt_cks gnat_cks cmp_cks a) :: msgs'')
            | None        => None
            end
        | None => None
        end
    end.

  Definition map_to_source_location (st: Symbol_Table_Module.symboltable) (bugInfor: return_message): return_message' :=
    match bugInfor with
    | OK    => OK'
    | Error => Error'
    | Mismatch msgs =>
        match (wrap_messages_with_source_location st msgs) with
        | Some msgs' => Mismatch' msgs'
        | None       => Error'
        end
    end.

End Map_To_Source_Location.



