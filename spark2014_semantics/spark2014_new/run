if [ ! $# == 2 ]; then
  echo "Usage: $0 coq_ast_source_file_name any_file_name.v"
  exit
fi

INPUT_FILENAME="$1"
OUTPUT_FILENAME="$2"
SUFFIX=".v"
COQ_AST_TREE="Coq_AST_Tree"
COQ_AST_TREE_X="Coq_AST_Tree_X"
EXPECTED_AST_TREE="Expected_Ast_Tree"
EXPECTED_OPTIMIZED_AST_TREE="Expected_Optimized_Ast_Tree"
SYMBOL_TABLE="Symbol_Table"  
SYMBOL_TABLE_X="Symbol_Table_X"

if [[ ! -f $INPUT_FILENAME ]]; then
  echo "Warning: File ($INPUT_FILENAME) does not exist !"
  exit
fi

if [[ $OUTPUT_FILENAME != *".v" ]]; then
  echo "Warning: File ($OUTPUT_FILENAME) should end with \".v\""
  exit
fi

> $2  # empty the file
echo -e "Require Export checks_count.\n" >> $2
echo -e "Require Export checks_comparison.\n" >> $2  # -e makes \n to insert newline
echo "" >> $2  # insert newline
echo -e "Require Export checks_optimization_exe.\n" >> $2

cat $1 >> $2

echo -e "Definition $EXPECTED_AST_TREE := compile2_flagged_declaration_f $SYMBOL_TABLE $COQ_AST_TREE.\n" >> $2
echo -e "Definition Return_Msgs := compare_with_expected_results $EXPECTED_AST_TREE $COQ_AST_TREE_X.\n" >> $2
echo -e "Definition Result := map_to_source_location $SYMBOL_TABLE Return_Msgs.\n" >> $2
echo "Eval compute in Result." >> $2
echo -e "Eval compute in (count_declaration_check_flags $COQ_AST_TREE_X).\n" >> $2
echo -e "Eval compute in (count_option_declaration_check_flags $EXPECTED_AST_TREE).\n" >> $2

eval "coqc $OUTPUT_FILENAME" # run the test

##############################
# compare with optimized ast #
##############################

OUTPUT_FILENAME_OPT="${OUTPUT_FILENAME/.v/_opt.v}"
> $OUTPUT_FILENAME_OPT  # empty the file
echo -e "Require Export ${OUTPUT_FILENAME/.v/ }.\n" >> $OUTPUT_FILENAME_OPT
echo -e "Require Export checks_count.\n" >> $OUTPUT_FILENAME_OPT

echo "(* help function *)" >> $OUTPUT_FILENAME_OPT
echo "Function optimize_declaration_f_x (st: symboltable_x) (decl: option declaration_x): option declaration_x := " >> $OUTPUT_FILENAME_OPT
echo "  match decl with" >> $OUTPUT_FILENAME_OPT
echo "  | Some d => optimize_declaration_f st d" >> $OUTPUT_FILENAME_OPT
echo "  | None => None" >> $OUTPUT_FILENAME_OPT
echo "  end." >> $OUTPUT_FILENAME_OPT

echo "" >> $OUTPUT_FILENAME_OPT

echo -e "Definition $EXPECTED_OPTIMIZED_AST_TREE := optimize_declaration_f_x $SYMBOL_TABLE_X $EXPECTED_AST_TREE.\n" >> $OUTPUT_FILENAME_OPT
echo -e "Definition Return_Msgs_Opt := compare_with_expected_results $EXPECTED_OPTIMIZED_AST_TREE $COQ_AST_TREE_X.\n" >> $OUTPUT_FILENAME_OPT
echo -e "Eval compute in (count_option_declaration_check_flags $EXPECTED_OPTIMIZED_AST_TREE).\n" >> $OUTPUT_FILENAME_OPT
echo -e "Definition Result_Opt := map_to_source_location $SYMBOL_TABLE Return_Msgs_Opt.\n" >> $OUTPUT_FILENAME_OPT

echo "Eval compute in Result_Opt." >> $OUTPUT_FILENAME_OPT

eval "coqc $OUTPUT_FILENAME_OPT" # run the test
